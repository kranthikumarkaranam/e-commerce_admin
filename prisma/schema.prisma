// Define the generator for Prisma client
generator client {
  provider = "prisma-client-js"
}

// Define the database configuration and connection
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// Model representing a store in the application
model Store {
  id          String    @id @default(uuid())
  name        String
  userId      String    // ID of the user associated with the store
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[] @relation("StoreToCategory")
  products    Product[]  @relation("StoreToProduct")
  sizes       Size[]     @relation("StoreToSize")
  colors      Color[]     @relation("StoreToColor")
  orders      Order[]     @relation("StoreToOrder")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model representing a billboard associated with a store
model Billboard {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[] // Relation to Category model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

// Model representing a category associated with a store
model Category {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String    // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

// Model representing a product associated with a store
model Product {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    // Foreign Key to Size
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String    // Foreign Key to Color
  color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[] // Relation to OrderItem model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

// Model representing an order associated with a store
model Order {
  id        String    @id @default(uuid())
  storeId   String    // Foreign Key to Store
  store     Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

// Model representing an intermediary for a many-to-many relationship between Order and Product
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// Model representing a size associated with a store
model Size {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

// Model representing a color associated with a store
model Color {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

// Model representing an image associated with a product
model Image {
  id          String    @id @default(uuid())
  productId   String    // Foreign Key to Product
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String    // URL of the image
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
}
